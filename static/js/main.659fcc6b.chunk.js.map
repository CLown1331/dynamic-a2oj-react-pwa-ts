{"version":3,"sources":["selector/selector.tsx","ladder/ladder.tsx","loader/loader.tsx","user-profile/user-profile.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Selector","props","className","name","value","selectedValue","onChange","list","map","l","id","Table","problems","p","problem","user","href","link","target","rel","difficulty","Ladder","selectedLadder","reduce","acc","cur","Loader","fetchUserProfile","username","cb","setLoading","a","console","log","window","localStorage","setItem","mp","fetch","response","json","result","status","JSON","stringify","forEach","r","verdict","contestId","index","UserProfile","useState","getItem","setUsername","loading","htmlFor","type","placeholder","e","disabled","onClick","setUser","App","parse","ladderList","ladder","setLadder","laddersDetails","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.659fcc6b.chunk.js","sourcesContent":["const Selector = (props: any) => {\n  return (\n    <div className=\"flex px-4\">\n      <select className=\"flex shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mt-4\"\n        name = {props.name}\n        value={props.selectedValue} \n        onChange={props.onChange} \n      >\n      { \n        props.list.map((l: any) => (<option key={l.id} value={l.id}>{l.name}</option>))\n      }\n      </select>\n    </div>\n  );\n};\n\nexport default Selector;","const TBodyRow = (problem: any, user: any) => {\n  return (\n    <tr className=\"bg-white border-b-2 border-gray-200\" key = {problem.id}>\n      <td className=\"px-4 sm:px-16 py-2 text-center ml-2 font-semibold\">{problem.id}</td>\n      <td className=\"px-4 sm:px-16 py-2 text-center ml-2 font-semibold\"><a href = {problem.link} target=\"_blank\" rel=\"noreferrer\">{problem.name}</a></td>\n      <td className=\"px-4 sm:px-16 py-2 text-center ml-2 font-semibold\">{problem.difficulty}</td>\n      <td className={`px-4 sm:px-16 py-2 text-center ml-2 font-semibold ${user[problem.link] ? 'bg-green-400' : 'bg-red-400'}`}>{user[problem.link] ? \"YES\" : \"NO\"}</td>\n    </tr>\n  );\n}\nconst Table = (props: any) => {\n  return (\n    <table className=\"table-auto mx-4\">\n      <thead className=\"justify-between text-gray-100 font-semibold\">\n        <tr className=\"bg-blue-500\">\n          <th className=\"px-4 sm:px-16 py-2\">Id</th>\n          <th className=\"px-4 sm:px-16 py-2\">Name</th>\n          <th className=\"px-4 sm:px-16 py-2\">Difficulty</th>\n          <th className=\"px-4 sm:px-16 py-2\">Solved</th>\n        </tr>\n      </thead>\n      <tbody className=\"bg-gray-200\">\n        {props.problems.map((p: any) => TBodyRow(p, props.user))}\n      </tbody>\n    </table>\n  );\n}\nconst Ladder = (props: any) => {\n  return (\n    <div>\n      <div className=\"text-center font-semibold my-2\">\n        {\n          props.selectedLadder.problems.map((problem: any) => props.user[problem.link] ? 1 : 0).reduce((acc: number, cur: number) => acc + cur) + ' problem(s) solved.'\n        }\n      </div>\n      <Table problems={props.selectedLadder.problems} user={props.user}></Table>\n    </div>\n  );\n};\n\nexport default Ladder;","const Loader = () => {;\n  return (\n    <div className='flex'>\n        <div className=\"mr-1 animate-bounce h-2.5 w-2.5 bg-current rounded-full\"></div>\n        <div className=\"mr-1 animate-bounce200 h-2.5 w-2.5 bg-current rounded-full\"></div>\n        <div className=\"animate-bounce400 h-2.5 w-2.5 bg-current rounded-full\"></div>\n    </div>\n  );\n};\n\nexport default Loader;","import { useState } from \"react\";\nimport Loader from \"../loader/loader\";\nconst url = `https://codeforces.com/api/user.status?from=1&handle=`\n\nconst fetchUserProfile = async (username:string, cb: any, setLoading: any) => {\n  console.log('fetching');\n  setLoading(true);\n  window.localStorage.setItem('last-used-username', username);\n  const mp: any = {};\n  const response = await window.fetch(url + username);\n  const result = await response.json();\n  if (result?.status !== 'OK') {\n    cb(mp);\n    setLoading(false);\n    window.localStorage.setItem('last-used-user', JSON.stringify(mp));\n    return;\n  }\n  result?.result.forEach((r: any) => {\n    if (r?.verdict === 'OK') {\n      mp['http://codeforces.com/problemset/problem/' + r?.problem?.contestId + '/' + r?.problem?.index] = true;\n      mp['https://codeforces.com/problemset/problem/' + r?.problem?.contestId + '/' + r?.problem?.index] = true;\n      mp['https://codeforces.com/contest/' + r?.problem?.contestId + '/problem/' + r?.problem?.index] = true;\n      mp['http://codeforces.com/contest/' + r?.problem?.contestId + '/problem/' + r?.problem?.index] = true;\n    }\n  });\n  cb(mp);\n  window.localStorage.setItem('last-used-user', JSON.stringify(mp));\n  setLoading(false);\n};\n\nconst UserProfile = (props: any) => {\n  const [username, setUsername] = useState(window.localStorage.getItem('last-used-username') || '');\n  const [loading, setLoading] = useState(false);\n  return (\n    <form className=\"flex flex-col px-4\">\n      <div className=\"mt-4\">\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"username\">Username:</label>\n        <input \n          value={username}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" \n          id=\"username\" type=\"text\" \n          placeholder=\"Username\" \n          onChange = {(e: any) => setUsername(e.target.value)}>\n\n          </input>\n        </div>\n      <input type=\"submit\" value=\"Fetch\"  \n        disabled={loading}\n        className={`${loading ? 'bg-gray-500 cursor-wait' : 'bg-blue-500 hover:bg-blue-700' }  text-white font-bold py-2 px-4 rounded my-4`} \n        onClick = {async() => await fetchUserProfile(username, props.setUser, setLoading)} />\n      <div className=\"flex justify-center mb-4\">\n        {loading && <Loader></Loader>}\n      </div>\n    </form>\n  )\n};\nexport default UserProfile;","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport ladderList from './static_data/ladder-list.json';\nimport laddersDetails from './static_data/ladder-details.json';\nimport Selector from './selector/selector';\nimport Ladder from './ladder/ladder';\nimport UserProfile from './user-profile/user-profile';\n\nconst App = () => {\n  const [ladder, setLadder] = useState(JSON.parse(window.localStorage.getItem('last-used-ladder') || '0') || ladderList[0].id);\n  const [user, setUser] = useState(JSON.parse(window.localStorage.getItem('last-used-user') || '{}') || {});\n  return (\n    <div className=\"flex flex-row min-h-screen justify-center items-center text-xs sm:text-sm lg:text-base\">\n      <div className=\"flex flex-col mb-6\">\n        <Selector\n          name = \"ladder\"\n          selectedValue = {ladder}\n          onChange = {(e: any) => { \n            window.localStorage.setItem('last-used-ladder', JSON.stringify(e.target.value));\n            setLadder(e.target.value);\n          }}\n          list = {ladderList}\n        ></Selector>\n        <UserProfile setUser = {setUser}></UserProfile>\n        <Ladder \n          className=\"\"\n          selectedLadder = {laddersDetails[ladder]}\n          user = {user}\n        >\n        </Ladder>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}